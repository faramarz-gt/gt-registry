{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "logo",
  "type": "registry:component",
  "title": "Brand Logo",
  "description": "A styled, simple, reusable logo",
  "registryDependencies": [
    "https://gt-registry.vercel.app/r/theme.json"
  ],
  "files": [
    {
      "path": "src/components/logo.tsx",
      "content": "\"use client\";\n\nimport Image from \"next/image\";\nimport { useEffect, useState } from \"react\";\n\ninterface LogoProps {\n  variant?: \"full\" | \"mark\";\n  className?: string;\n}\n\nexport function Logo({ variant = \"full\", className = \"\" }: LogoProps) {\n  const [isDark, setIsDark] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [imageError, setImageError] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n    // Check for dark mode class on document element\n    const checkDarkMode = () => {\n      setIsDark(document.documentElement.classList.contains('dark'));\n    };\n    \n    checkDarkMode();\n    \n    // Listen for changes to dark mode\n    const observer = new MutationObserver(checkDarkMode);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n\n    return () => observer.disconnect();\n  }, []);\n\n  // Fallback component if image fails to load\n  const LogoFallback = ({ text }: { text: string }) => (\n    <div className={`flex items-center justify-center bg-primary text-primary-foreground font-bold rounded ${className}`}>\n      <span className={variant === \"mark\" ? \"text-xs\" : \"text-sm\"}>{text}</span>\n    </div>\n  );\n\n  // If not mounted yet, use default (light) theme to prevent hydration mismatch\n  if (!mounted) {\n    if (variant === \"mark\") {\n      return imageError ? (\n        <LogoFallback text=\"GT\" />\n      ) : (\n        <Image\n          src=\"/assets/gtreasury/gtreasury-logo-mark.svg\"\n          alt=\"GTreasury\"\n          width={32}\n          height={32}\n          className={`h-8 w-8 ${className}`}\n          priority\n          onError={() => setImageError(true)}\n        />\n      );\n    }\n\n    return imageError ? (\n      <LogoFallback text=\"GTreasury\" />\n    ) : (\n      <Image\n        src=\"/assets/gtreasury/gtreasury-logo-rgb.svg\"\n        alt=\"GTreasury\"\n        width={120}\n        height={29}\n        className={`h-7 w-auto ${className}`}\n        priority\n        onError={() => setImageError(true)}\n      />\n    );\n  }\n\n  if (variant === \"mark\") {\n    return imageError ? (\n      <LogoFallback text=\"GT\" />\n    ) : (\n      <Image\n        src=\"/assets/gtreasury/gtreasury-logo-mark.svg\"\n        alt=\"GTreasury\"\n        width={32}\n        height={32}\n        className={`h-8 w-8 ${className}`}\n        priority\n        onError={() => setImageError(true)}\n      />\n    );\n  }\n\n  // For full logo, use appropriate color variant based on theme\n  const logoSrc = isDark\n    ? \"/assets/gtreasury/gtreasury-logo-rgb-white.svg\"\n    : \"/assets/gtreasury/gtreasury-logo-rgb.svg\";\n\n  return imageError ? (\n    <LogoFallback text=\"GTreasury\" />\n  ) : (\n    <Image\n      src={logoSrc}\n      alt=\"GTreasury\"\n      width={120}\n      height={29}\n      className={`h-7 w-auto ${className}`}\n      priority\n      onError={() => setImageError(true)}\n    />\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/app/starters/(minimal)/v0-layout.tsx",
      "content": "import { Geist, Geist_Mono, Montserrat } from \"next/font/google\";\nimport React, { type ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/app/tokens.css\";\nimport \"@/app/globals.css\";\n\nconst GeistSans = Geist({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nconst GeistMono = Geist_Mono({\n  subsets: [\"latin\"],\n  variable: \"--font-mono\",\n});\n\nconst MontserratSerif = Montserrat({\n  subsets: [\"latin\"],\n  variable: \"--font-serif\",\n});\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <html\n      lang=\"en\"\n      className={cn(\n        GeistSans.variable,\n        GeistMono.variable,\n        MontserratSerif.variable,\n        \"bg-background text-foreground\",\n      )}\n    >\n      <body>\n        <main className=\"mt-16 flex w-full justify-center\">\n          <div className=\"container\">{children}</div>\n        </main>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    },
    {
      "path": "src/app/starters/(minimal)/blank/page.tsx",
      "content": "export default function Page() {\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-4 rounded-md py-96\">\n      <div className=\"text-muted-foreground\">\n        Start prompting to use your component!\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    }
  ]
}